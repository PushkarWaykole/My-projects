# Tic-Tac-Toe using Python

# Game Board
# display board
# play game
# handle turn
# check win
    #check rows 
    #check columns
    #check diagonals
# check tie
# flip player
board = ["_","_","_",
        "_","_","_",
        "_","_","_",]

# If game is still going
game_still_going=True

# Who win or lose
winner=None

# Whose turn is it
current_player="X"

# display board 
def display_board():
    print(board[0]+"|"+board[1]+"|"+board[2])
    print(board[3]+"|"+board[4]+"|"+board[5])
    print(board[6]+"|"+board[7]+"|"+board[8])

def play_game():
    #Display initial board
    display_board()

    #While the game is still going
    while game_still_going:

        #handle a single turn of an arbitrary player
        handle_turn(current_player)

        #check if the game has ended
        check_if_game_over()

        #flip to the other player
        flip_player()

    #The game has ended
    if winner=="X" or winner=="O":
        print(winner+" Won")
    elif winner==None:
        print("Its a Tie.")

# Handle a single turn of an arbitrary player
def handle_turn(current_player):

    print(current_player+" s turn")
    position=input("Choose a position from 1 to 9:")

    valid=False
    while not valid:
        while position not in ["1","2","3","4","5","6","7","8","9"]:
            position=input("Choose a position from 1 to 9:")
        
        position=int(position)-1

        if board[position]=="_":
            valid=True
        else:
            print("You cant go there.Go again.")
    board[position]=current_player

    display_board()

def check_if_game_over():
    check_for_winner()
    check_if_tie()

def check_for_winner():

    #Set up global Variables
    global winner

    #check rows
    row_winner=check_rows()

    #check columns
    column_winner=check_columns()

    #check diagonals
    diagonal_winner=check_diagonals()

    #Get the winner
    if row_winner:
        winner=row_winner
    elif column_winner:
        winner=column_winner
    elif diagonal_winner:
        winner=diagonal_winner
    else:
        winner=None
    return

# Functions to check rows or columns or diagonals

def check_rows():
    global game_still_going
    #check if any of the rows have all the same value
    row1=board[0]==board[1]==board[2]!="_"
    row2=board[3]==board[4]==board[5]!="_"
    row3=board[6]==board[7]==board[8]!="_"
    #if there is a match then flag there is a win
    if row1 or row2 or row3:
        game_still_going=False

    #rrturn the winner(X or O)    
    if row1:
        return board[0]
    elif row2:
        return board[3]
    elif row3:
        return board[6]
    return

def check_columns():

    # Declare global variables
    global game_still_going

    #check if any of the rows have all the same value
    col1=board[0]==board[3]==board[6] != "_"
    col2=board[1]==board[4]==board[7] != "_"
    col3=board[2]==board[5]==board[8] != "_"
    #if there is a match then flag there is a win
    if col1 or col2 or col3:
        game_still_going=False

    #return the winner    
    if col1:
        return board[0]
    elif col2:
        return board[1]
    elif col3:
        return board[2]
    return

def check_diagonals():

    global game_still_going

    d1=board[0]==board[4]==board[8]!="_"
    d2=board[6]==board[4]==board[2]!="_"

    if d1 or d2:
        game_still_going=False
    
    #Return the winner
    if d1:
        return board[0]
    elif d2:
        return board[6]
    return

def check_if_tie():

    global game_still_going
    
    # Check whether any of position in the board is empty
    if "_" not in board:
        game_still_going=False
    return


def flip_player():
    global current_player
    
    #if the current player was x then change it to object

    if current_player =="X":
        current_player="O"
    elif current_player=="O":
        current_player="X"
    return



play_game()








    
